#!/bin/sh
# Copyright 2007-2009 Dylan Cochran
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.

# $Id$

# Generic wrappers so that installer will work on FreeBSD.

FORFS="
"

OLDFS=" 	
"

if [ ! -c "${DEVICES}/null" ] ; then
	if [ -c "/dev/null" ] ; then
		DEVICES=/dev
	else
		echo "Error, no device nodes found"
		exit 1
	fi
fi

if [ "${EVOKE_MNTDIR}" = "" ] ; then
	if [ -d /media ] ; then
		export EVOKE_MNTDIR="/media"
	fi
fi
if [ "${TMPDIR}" = "" ] ; then
	if [ -d /tmp ] ; then
		export TMPDIR="/tmp"
	fi
fi

if [ ! -d "${EVOKE_SYSCONFIG_DIR}" ] ; then
	export EVOKE_SYSCONFIG_DIR="/tmp/sysconfig"
	mkdir -p ${EVOKE_SYSCONFIG_DIR}
fi

if [ ! -d "${EVOKE_CURUSER}" ] ; then
	export EVOKE_CURUSER="/tmp/currentuser"
	mkdir -p ${EVOKE_CURUSER}
fi

echo "WARNING. installer is experimental, and there ARE bugs"
echo "that will result in loss of data. DO NOT USE"
read -p "Continue? [yN]: " CONT
if [ "${CONT}" != "y" ] ; then
	exit
fi

rand() {
	echo "$(dd if=/dev/random bs=4m count=1 2>${DEVICES}/null | md5 -q | cut -b 1-31)"
}

main_installer () {
	until [ "${BREAKOUT}" = "yes" ] 
	do
		echo "Installer"
		echo ""
		echo "-----------------------------"
		echo ""
		echo " 1) Install Evoke "
		echo " 2) Install FreeBSD"
		echo " a) Activater"
		echo " q) Exit "
		echo ""
		echo ""
		read -p "Choice: " CHOICE
		case "${CHOICE}" in
			1)
				evoke_chooser
			;;
			2)
				freebsd_chooser
				freebsd_installer
			;;
			[aA])
				update activate
			;;
			[qQ])
				BREAKOUT="yes"
			;;
		esac
	done
}

# FreeBSD based distribution destination chooser.

freebsd_chooser() {
	echo ""
	echo -n "Partition Disks? [yN]: "
	read ANSWER
	case "${ANSWER}" in
		[yY])
			partdisk freebsd
		;;
	esac
	if [ "${BOOTDEVICE}" = "" ] ; then
		clear
		BOOTDEVICE=$(menu "Choose Root Filesystem" "$(mounter list boot-ufs)")
	fi
	mounter ufs:${BOOTDEVICE} ${DESTDIR}
}

# Evoke Chooser

evoke_chooser() {
	SYSCONFIG_LIST="$(mounter list sysconfig)"
	SC_COUNT="$(echo "${SYSCONFIG_LIST}" | wc -l | awk '{ print $1; }')"
	if [ "${SYSCONFIG_LIST}" != "" ] ; then
		echo "Existing evoke installation found. Would you like to duplicate?"
		echo ""
		echo "Warning, this will duplicate all private configuration data."
		echo -n "Duplicate? [yN]: "
		read ANSWER
		case "${ANSWER}" in
			[yY])
				MODE="duplicate"
			;;
			*)
				MODE="normal"
			;;
		esac
	else
		MODE="normal"
	fi
	case "${MODE}" in
		normal)
			echo ""
			echo -n "Partition Disks? [yN]: "
			read ANSWER
			case "${ANSWER}" in
				[yY])
					partdisk evoke
				;;
			esac
			sysconfig create current
			USERCONFIG_UUID="$(userconfig create)"

			BOOTHASH="${BOOTHASH}" update menu
		;;
		duplicate)
			export SOURCEDIR=${EVOKE_MNTDIR}/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)
			export DESTDIR=${EVOKE_MNTDIR}/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)

			mkdir -p ${SOURCEDIR}
			mkdir -p ${DESTDIR}
			DISKS="$(for partition in ${SYSCONFIG_LIST}
			do
				for disk in $(mounter list disk)
				do
					if [ "$(echo "${partition}" | grep "${disk}")" != "" ] ; then
						echo "${disk}"
					fi
				done
			done)"
			if [ "$(echo "${DISKS}" | wc -l | awk '{ print $1; }')" -gt 1 ] ; then
				DISK="$(menu "Choose Source Disk" "${DISKS}")"
			else
				DISK="${DISK}"
			fi
			SOURCEPARTITIONS="$(lsvol | grep "${DISK}" | grep -v "\:${DISK}$" | sort -t : -k 2)"
			PARTLIST="$(for partition in ${SOURCEPARTITIONS}
			do
				PROTO="$(echo ${partition} | cut -d : -f 1)"
				DEVICE="$(echo ${partition} | cut -d : -f 2)"
				SIZE="$(($(sysctl -b kern.geom.conftxt | grep -a "${DEVICE}" | awk '{ print $4; }') / 512))"
				TYPE="$(sysctl -b kern.geom.conftxt | grep -a "${DEVICE}" | awk '{ print $15; }')"
				echo "proto=${PROTO} device=${DEVICE} size=${SIZE} type=${TYPE}"
			done | uniq -f 1)"
			TOTALSIZE=256
			IFS=${FORFS}
			for partition in ${PARTLIST}
			do
				SIZE="$(echo "${partition}" | awk '{ print $3; }' | cut -d = -f 2)"
				TOTALSIZE="$(( ${TOTALSIZE} + ${SIZE} ))"
			done
			IFS="${OLDFS}"
			while [ BLAH != BLEH ]
			do
				RESULT=$(menu "Choose Destination Disk" "$(mounter list real-disk)")
				DESTSIZE="$(( $(sysctl -b kern.geom.conftxt | awk -v DEVICE="${RESULT}" '{ if ($3 == DEVICE) { print $4; } }') / 512))"
				if [ "${DESTSIZE}" -lt "${TOTALSIZE}" ] ; then
					echo -n "Destination disk too small"
					read ANSWER
				else
					break
				fi
			done
			partprep "${RESULT}"
			IFS=${FORFS}
			echo "Allocating..."
			for partition in ${PARTLIST}
			do
				SIZE="$(echo "${partition}" | awk '{ print $3; }' | cut -d = -f 2)"
				TYPE="$(echo "${partition}" | awk '{ print $4; }' | cut -d = -f 2)"
				gpt add -s "${SIZE}" -t "${TYPE}" ${DEVICES}/${RESULT}
			done
			SCRATCHDIR="${TMPDIR}/installer/$(rand)"
			mkdir -p "${SCRATCHDIR}"
			echo "Duplicating..."
			CURRENTPART="2"
			for partition in ${PARTLIST}
			do
				PROTO="$(echo "${partition}" | awk '{ print $1; }' | cut -d = -f 2)"
				DEVICE="$(echo "${partition}" | awk '{ print $2; }' | cut -d = -f 2)"
				SIZE="$(echo "${partition}" | awk '{ print $3; }' | cut -d = -f 2)"
				TYPE="$(echo "${partition}" | awk '{ print $4; }' | cut -d = -f 2)"
				case "${PROTO}" in
					*ufs)
						export TRACKFILE=${SCRATCHDIR}/${DEVICE}
						newfs ${DEVICES}/${RESULT}p${CURRENTPART} >${DEVICES}/null 2>${DEVICES}/null
						mounter ${PROTO}:${DEVICE} ${SOURCEDIR} >${DEVICES}/null 2>${DEVICES}/null
						mounter ${PROTO}:${RESULT}p${CURRENTPART} ${DESTDIR} >${DEVICES}/null 2>${DEVICES}/null
						OLDPWD="$(pwd)"
						cd "${SOURCEDIR}"
						OPTIONS="write quiet" verify *
						tar -cf - * | tar -xpf - -C ${DESTDIR}/
						cd "${OLDPWD}"
						mounter unmount ${SOURCEDIR}
						mounter unmount ${DESTDIR}
					;;
					*)
						sha256 -q ${DEVICES}/${DEVICE} >${SCRATCHDIR}/${DEVICE}
						dd if=${DEVICES}/${DEVICE} bs=512 of=${DEVICES}/${RESULT}p${CURRENTPART} >${DEVICES}/null 2>${DEVICES}/null

					;;
				esac
				CURRENTPART="$(( ${CURRENTPART} + 1))"
			done
			echo "Verifying..."
			CURRENTPART="2"
			for partition in ${PARTLIST}
			do
				PROTO="$(echo "${partition}" | awk '{ print $1; }' | cut -d = -f 2)"
				DEVICE="$(echo "${partition}" | awk '{ print $2; }' | cut -d = -f 2)"
				SIZE="$(echo "${partition}" | awk '{ print $3; }' | cut -d = -f 2)"
				TYPE="$(echo "${partition}" | awk '{ print $4; }' | cut -d = -f 2)"
				case "${PROTO}" in
					*ufs)
						mounter ${PROTO}:${RESULT}p${CURRENTPART} ${DESTDIR} >${DEVICES}/null 2>${DEVICES}/null
						OLDPWD="$(pwd)"
						cd "${DESTDIR}"
						export TRACKFILE=${SCRATCHDIR}/${DEVICE}
						OPTIONS="nowrite quiet" verify
						RETVAL=$?
						cd "${OLDPWD}"
						sleep 5
						mounter unmount ${DESTDIR}
						if [ "${RETVAL}" != "0" ] ; then
							echo -n "Verification failed "
							read ANSWER
							break
						fi
						
					;;
					sysconfig)
						sysconfig verify ${RESULT}p${CURRENTPART} >${DEVICES}/null
						RETVAL=$?
						if [ "${RETVAL}" != "0" ] ; then
							echo -n "Verification failed "
							read ANSWER
							break
						fi
					;;
					*)
						DESTHASH="$(sha256 -q ${DEVICES}/${RESULT}p${CURRENTPART})"
						if [ "${DESTHASH}" != "$(cat ${SCRATCHDIR}/${DEVICE})" ] ; then
							echo -n "Verification failed "
							read ANSWER
							break
						fi
					;;
				esac				
				CURRENTPART="$(( ${CURRENTPART} + 1))"
			done
			IFS="${OLDFS}"
		;;
	esac
}

partprep() {
	mounter unmount ${1}
	gpt destroy ${DEVICES}/${1}
	dd if=/dev/zero bs=4m count=1 of=${DEVICES}/${1} 2>${DEVICES}/null
	gpt create ${DEVICES}/${1}
	gpt boot ${DEVICES}/${1}
}

# Disk partitioning function
partdisk() {
	RESULT=$(menu "Choose Disk" "$(mounter list disk)")
	echo -n "Do you want to use the entire disk? [yN]: "
	read ANSWER
	case "${1}" in
		evoke)
			case "${ANSWER}" in
				[yY])
					partprep "${RESULT}"
#					gpt add -s 16384 -t 4b4cf826-e53e-4b56-86b6-0f9b728e0436 ${DEVICES}/${RESULT}
					gpt add -s 4096 -t 4b4cf826-e53e-4b56-86b6-0f9b728e0436 ${DEVICES}/${RESULT}
					gpt add -s 8 -t ac4b7c4a-9c4c-4687-b55f-f51a731d36d2 ${DEVICES}/${RESULT}
					export EVOKE_SYSCONFIG="${RESULT}p2"
					SIZE="$(sysctl -b kern.geom.conftxt | awk -v RESULT=${RESULT} '{ if ($3 == RESULT) { print $4; } }')"

					if [ "${SIZE}" -le "512099328" ] ; then

						gpt add ${DEVICES}/${RESULT}

					else
						gpt add -s 1000000 ${DEVICES}/${RESULT}

						if [ "${SIZE}" -gt "1024099328" ] ; then
							echo -n "Do you want to create a swap partition? [yN]: "
							read SWAP
							case "${SWAP}" in
								[yY])
									gpt add -s 1000000 -t swap ${DEVICES}/${RESULT}
								;;
							esac
						fi
					fi
					BOOTHASH="$(rand)"
					BOOTDEVICE="$(mounter list boot-ufs | grep "${RESULT}" | head -n 1)"
					newfs -L "${BOOTHASH}" "${DEVICES}/${BOOTDEVICE}"
					FSLIST="$(mounter list ufs | grep "${RESULT}")"
					if [ "${FSLIST}" != "" ] ; then
						IFS="${FORFS}"
						for device in ${FSLIST}
						do
							FSHASH="$(rand)"
							newfs -L "${FSHASH}" "${DEVICES}/${device}"
						done
						IFS="${OLDFS}"
					fi
				;;
				[nN])
					echo "Not currently Implemented"	
				;;
			esac
		;;
		freebsd)
			case "${ANSWER}" in
				[yY])
					mounter unmount ${RESULT}

					dd if=/dev/zero bs=4m count=1 of=${DEVICES}/${RESULT} 2>${DEVICES}/null
					gpt create ${DEVICES}/${RESULT}
					gpt boot ${DEVICES}/${RESULT}
					echo -n "Do you want to create a swap partition? [yN]: "
					read SWAP
					case "${SWAP}" in
						[yY])
							gpt add -s 1000000 -t swap ${DEVICES}/${RESULT}
						;;
					esac
					gpt add ${DEVICES}${RESULT}
					BOOTHASH="$(rand)"
					BOOTDEVICE="$(mounter list boot-ufs | grep "${RESULT}" | head -n 1)"
					newfs -L ${BOOTHASH} ${DEVICES}/${BOOTDEVICE}
				;;
				[nN])
					echo "Not currently Implemented"	
				;;
			esac
		;;
	esac
}

freebsd_installer() {
	export SOURCEDIR=${EVOKE_MNTDIR}/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)
	export DESTDIR=${EVOKE_MNTDIR}/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)

	mkdir -p ${SOURCEDIR}
	mkdir -p ${DESTDIR}

	unset BREAKOUT
	export URLS="ftp://ftp.freebsd.org/pub/FreeBSD/releases
			ftp://ftp-archive.freebsd.org/pub/FreeBSD-Archive/old-releases"
	while [ "${BREAKOUT}" != "yes" ]
	do
		SRCFS=$(menu "Choose Source" "$(mounter list proto | sort ; echo Select Path)")
		SRCLOC=$(menu "Choose Location" "$(mounter list ${SRCFS} ; echo Enter Location)")
		RSRCDIR=${SOURCEDIR}
		if [ "${SRCLOC}" = "Enter Location" ] ; then
			if [ "${SRCFS}" = "Select Path" ] ; then
				echo "Please type the full path name, starting at /"
				read -p ": " SOURCEDIR
				export SOURCEDIR
			else
				echo "Please type the device node or URL you wish to use."
				echo "ex. ad0s1a, or ftp.freebsd.org/pub/FreeBSD/"
				read -p ": " SRCLOC
				mounter ${SRCFS}:${SRCLOC} ${SOURCEDIR}
			fi
		else
			mounter ${SRCFS}:${SRCLOC} ${SOURCEDIR}

		fi
		RELEASES="$(ls -p ${SOURCEDIR} | grep /$ | cut -d / -f 1 | egrep '^[0-9.]+-[a-zA-Z0-9]')" >/dev/null
		if [ "${RELEASES}" = "" ] ; then
			ARCH=$(menu "Choose Architecture" "$(ls -p ${SOURCEDIR} | grep /$ | cut -d / -f 1 | grep -v evoke | grep -v boot | grep -v cdboot)")
			RELEASES="$(ls -p ${SOURCEDIR}/${ARCH} |  grep /$ | cut -d / -f 1 | egrep '^[0-9.]+-[a-zA-Z0-9]')" >/dev/null
			if [ "${RELEASES}" = "" ] ; then
				echo "Error, unable to find a suitable release"
				mounter unmount ${RSRCDIR}
			else
				RELEASE=$(menu "Choose Release" "$(ls -p ${SOURCEDIR}/${ARCH} | grep /$ | cut -d / -f 1 | grep '^[0-9].[0-9].[a-zA-Z0-9].')")
				export SRCDIR=${SOURCEDIR}/${ARCH}/${RELEASE}
				BREAKOUT="yes"
			fi		
		else
			RELEASE=$(menu "Choose Release" "$(ls -p ${SOURCEDIR}/${ARCH} | grep /$ | cut -d / -f 1 | grep '^[0-9].[0-9].[a-zA-Z0-9].')")
			export SRCDIR=${SOURCEDIR}/${RELEASE}
			BREAKOUT="yes"
		fi
	done
	read -p "Last Chance, are you sure you want to install ${RELEASE}/${ARCH}? [y/N] " ANSWER
	if [ "${ANSWER}" = "y" ] ; then
		DISTS="base catpages doc games info manpages kernels proflibs src" distextract
	fi
cat >>${DESTDIR}/boot/loader.conf << EOF
kernel="GENERIC"
vfs.root.mountfrom="ufs:ufs/${BOOTHASH}"
geom_label_load="YES"
EOF
cat >>${DESTDIR}/etc/fstab << EOF
/dev/ufs/${BOOTHASH}	/	ufs	rw,noatime	1	1
EOF
echo "/boot/loader" >${DESTDIR}/boot.config
	mounter unmount ${DESTDIR}
	mounter unmount ${SOURCEDIR}
	rmdir ${SOURCEDIR}
	rmdir ${DESTDIR}
	rmdir ${RSRCDIR}

}

main_installer
