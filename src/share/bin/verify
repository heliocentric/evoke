#!/bin/sh
# Copyright 2007-2009 Dylan Cochran
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


# $Id$

# Set this so we can call this file again if a filename passed is a directory.
BIN="$0"

# Check for the existence of the DEVICES variable, and whether it's what we need. if not, fall back to /dev
if [ ! -c "${DEVICES}/null" ] ; then
	if [ -c "/dev/null" ] ; then
		DEVICES=/dev
	else
		echo "Error, no device nodes found"
		exit 1
	fi
fi

# This works whether TRACKFILE is a device node, or a regular file.

if [ "${TRACKFILE}" != "" ] ; then
	RTRACKFILE="${TRACKFILE}"
fi

if [ ! -d "${PREFIX}" ] ; then
	unset PREFIX
fi
if [ ! -d "${TMPDIR}" ] ; then
	TMPDIR="/tmp"
fi

dircheck() {
	if [ "${NO_RECURSE}" != "" -a "${1}" = "inode/mount-point" ] ; then
		echo "error 2 ${2}"
	else
		# We replaced the ${BIN} ${2}/* with this for loop,
		# as it works around sh's restriction.
		for entry in $(ls -a ${2})
		do
			if [ "${entry}" != "." -a "${entry}" != ".." ] ; then
				verify_loop ${2}/${entry}
			fi
		done
	fi
}

verify_loop() {

	while [ "${1}" != "" ]
	do
		export MIME_TYPE="$(OPTIONS="quiet norecurse" filetype "${1}")"
		case "${MIME_TYPE}" in	
			inode/directory)
				dircheck "${MIME_TYPE}" "${1}"
			;;
			inode/mount-point)
				dircheck "${MIME_TYPE}" "${1}"
			;;
			*)

				for type in ${TYPES}
				do
					# We always need the file's hash from the contents, so keep it out
					# of the conditional
					RHASH=$(${type} -q "${1}" 2>${DEVICES}/null)
					if [ "${RTRACKFILE}" != "" ]; then
						if [ "${WRITE}" = "yes" ] ; then
							echo "F:${1}:${RHASH}:$(stat -f '%z' "${1}")"							
						else
							unset FHASH
							FHASH=$(grep -a ^F: "${RTRACKFILE}" | awk -v FILENAME="${1}" -F ":" '{ if ($2 == FILENAME) { print $3; } }' 2>${DEVICES}/null)
							if [ "${RHASH}" != "${FHASH}" ] ; then
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} fail ${1}"
								fi
								ERRORCODE="65"
							else
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} pass ${1}"
								fi
							fi	
						fi
					else
						if [ "${WRITE}" = "yes" ] ; then
							setextattr system ${type} ${RHASH} "${1}" 2>${DEVICES}/null
						else
							unset FHASH
							FHASH=$(getextattr -q system ${type} "${1}" 2>${DEVICES}/null)
							if [ "${RHASH}" != "${FHASH}" ] ; then
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} fail ${1}"
								fi
								ERRORCODE="65"
							else
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} pass ${1}"
								fi
							fi	
						fi
					fi
				done
			;;	
		esac
		shift
	done
}

verify() {
	ERRORCODE="0"
	QUIET="no"
	WRITE="no"
	RECURSE="yes"

	if [ "${OPTIONS}" != "" ] ; then
		for option in ${OPTIONS}
		do
			case "${option}" in
				norecurse)
					RECURSE="no"
				;;
				recurse)
					RECURSE="yes"
				;;
				quiet)
					QUIET="yes"
				;;
				verbose)
					QUIET="no"
				;;
				write)
					WRITE="yes"
				;;
				nowrite)
					WRITE="no"
				;;
			esac
		done
	fi

	SCRATCHDIR="${TMPDIR}/verify/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)"
	mkdir -p "${SCRATCHDIR}"
	TYPES="sha256 md5"

	if [ "${RTRACKFILE}" != "" ] ; then
		TYPES="sha256"
		if [ "${WRITE}" = "yes" ] ; then
			TRACKDATA="$(verify_loop $@)"
			TRACKDATA="$(printf "${TRACKDATA}\n#")"
			echo "${TRACKDATA}" | dd bs=512 fillchar=" " conv=sync "of=${SCRATCHDIR}/head" 2>${DEVICES}/null
			dd if=/dev/zero bs=512 count=1 "of=${SCRATCHDIR}/tail" 2>${DEVICES}/null

			if [ -r "${TRACKFILE_PRIVATE_KEY}" ] ; then
				sha256 -q "${SCRATCHDIR}/head" | openssl rsautl -sign -inkey "${TRACKFILE_PRIVATE_KEY}" -out "${SCRATCHDIR}/sign" 2>${DEVICES}/null
			else
				dd if=/dev/zero bs=512 count=1 "of=${SCRATCHDIR}/sign" 2>${DEVICES}/null
			fi

			cat "${SCRATCHDIR}/head" "${SCRATCHDIR}/sign" "${SCRATCHDIR}/tail" >"${SCRATCHDIR}/trackfile"
			DEVICE="$(mdconfig -af ${SCRATCHDIR}/trackfile)"
			geom label load
			geom label label trackfile /dev/${DEVICE}
			mdconfig -d -u $(echo ${DEVICE} | cut -b 3-7)
			cp "${SCRATCHDIR}/trackfile" "${TRACKFILE}"
		else
			verify_loop $@
		fi
	else
		verify_loop $@
	fi
	exit "${ERRORCODE}"
}

verify $@

