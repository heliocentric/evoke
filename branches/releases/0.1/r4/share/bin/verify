#!/bin/sh
# Copyright 2007-2009 Dylan Cochran
# All rights reserved
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted providing that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY
# DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS
# OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
# HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
# STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
# IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.


# $Id$

# Set this so we can call this file again if a filename passed is a directory.
BIN="$0"

# Check for the existence of the DEVICES variable, and whether it's what we need. if not, fall back to /dev
if [ ! -c "${DEVICES}/null" ] ; then
	if [ -c "/dev/null" ] ; then
		DEVICES=/dev
	else
		echo "Error, no device nodes found"
		exit 1
	fi
fi


# This works whether TRACKFILE is a device node, or a regular file.

if [ "${TRACKFILE}" != "" ] ; then
	RTRACKFILE="${TRACKFILE}"
fi


if [ ! -d "${PREFIX}" ] ; then
	unset PREFIX
fi
if [ ! -d "${TMPDIR}" ] ; then
	TMPDIR="/tmp"
fi

dircheck() {
	if [ "${NO_RECURSE}" != "" -a "${1}" = "inode/mount-point" ] ; then
		echo "error 2 ${2}"
	else
		# We replaced the ${BIN} ${2}/* with this for loop,
		# as it works around sh's restriction.
		for entry in $(ls -a ${2})
		do
			if [ "${entry}" != "." -a "${entry}" != ".." ] ; then
				verify_loop ${2}/${entry}
			fi
		done
	fi
}

verify_loop() {

	while [ "${1}" != "" ]
	do
		export MIME_TYPE="$(OPTIONS="quiet norecurse" filetype "${1}")"
		case "${MIME_TYPE}" in	
			inode/directory)
				if [ "${RTRACKFILE}" != "" ]; then
						if [ "${WRITE}" = "yes" ] ; then
							echo "D:${1}:$(stat -f '%Su:%Sg:%Sp:%m:%c:' "${1}")"
						fi
				fi
				dircheck "${MIME_TYPE}" "${1}"
			;;
			inode/mount-point)
				dircheck "${MIME_TYPE}" "${1}"
			;;
			*)

				for type in ${TYPES}
				do
					# We always need the file's hash from the contents, so keep it out
					# of the conditional
					RHASH=$(${type} -q "${1}" 2>${DEVICES}/null)
					if [ "${RTRACKFILE}" != "" ]; then
						if [ "${WRITE}" = "yes" ] ; then
							echo "F:${1}:${RHASH}:$(stat -f '%z:%Su:%Sg:%Sp:%m:%c' "${1}"):${MIME_TYPE}:"
						else
							unset FHASH
							FHASH=$(grep -a ^F: "${RTRACKFILE}" | awk -v FILENAME="${1}" -F ":" '{ if ($2 == FILENAME) { print $3; } }' 2>${DEVICES}/null)
							if [ "${RHASH}" != "${FHASH}" ] ; then
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} fail ${1}"
								fi
								ERRORCODE="65"
							else
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} pass ${1}"
								fi
							fi	
						fi
					else
						if [ "${WRITE}" = "yes" ] ; then
							setextattr user ${type} ${RHASH} "${1}" 2>${DEVICES}/null
						else
							unset FHASH
							FHASH=$(getextattr -q user ${type} "${1}" 2>${DEVICES}/null)
							if [ "${RHASH}" != "${FHASH}" ] ; then
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} fail ${1}"
								fi
								ERRORCODE="65"
							else
								if [ "${QUIET}" = "no" ] ; then
									echo "${type} pass ${1}"
								fi
							fi	
						fi
					fi
				done
			;;	
		esac
		shift
	done
}

verify() {
	ERRORCODE="0"
	QUIET="no"
	WRITE="no"
	RECURSE="yes"
	TRACKFILE_ONLYRSA="no"

	if [ "$(is_uuid ${TRACKFILE_AUTHORITY})" = "yes" ] ; then
		TRACKFILE_AUTHORITY="${TRACKFILE_AUTHORITY}"
	else
		TRACKFILE_AUTHORITY=""
	fi

	if [ "$(is_uuid ${TRACKFILE_USER})" = "yes" ] ; then
		TRACKFILE_USER="${TRACKFILE_USER}"
	else
		TRACKFILE_USER=""
	fi

	if [ "${OPTIONS}" != "" ] ; then
		for option in ${OPTIONS}
		do
			case "${option}" in
				norecurse)
					RECURSE="no"
				;;
				recurse)
					RECURSE="yes"
				;;
				quiet)
					QUIET="yes"
				;;
				verbose)
					QUIET="no"
				;;
				write)
					WRITE="yes"
				;;
				nowrite)
					WRITE="no"
				;;
				trackfile_onlyrsa)
					TRACKFILE_ONLYRSA="yes"
				;;
			esac
		done
	fi

	SCRATCHDIR="${TMPDIR}/verify/$(dd if=/dev/random bs=4m count=1 2>/dev/null | sha256 -q)"
	mkdir -p "${SCRATCHDIR}"


	TYPES="sha256 md5"

	if [ "${RTRACKFILE}" != "" ] ; then
		TYPES="sha256"

		# Test the openssl signing abilities, to figure out the size of the resulting signature.
		if [ -r "${TRACKFILE_PUBLIC_KEY}" ] ; then
			TRACKFILE_REAL_PUBLICKEY="${TRACKFILE_PUBLIC_KEY}"
		else
			if [ -r "${EVOKE_KEYRING}/${TRACKFILE_AUTHORITY}/${TRACKFILE_USER}/public.rsa" ] ; then
				TRACKFILE_REAL_PUBLICKEY="${EVOKE_KEYRING}/${TRACKFILE_AUTHORITY}/${TRACKFILE_USER}/public.rsa"
			fi
		fi

		if [ "${WRITE}" = "yes" ] ; then

			# Test the openssl signing abilities, to figure out the size of the resulting signature.
			if [ -r "${TRACKFILE_PRIVATE_KEY}" ] ; then
				TRACKFILE_REAL_PRIVATEKEY="${TRACKFILE_PRIVATE_KEY}"
			else
				if [ -r "${EVOKE_KEYRING}/${TRACKFILE_AUTHORITY}/${TRACKFILE_USER}/private.rsa" ] ; then
					TRACKFILE_REAL_PRIVATEKEY="${EVOKE_KEYRING}/${TRACKFILE_AUTHORITY}/${TRACKFILE_USER}/private.rsa"
				fi
			fi

			if [ "${TRACKFILE_REAL_PRIVATEKEY}" != "" ] ; then
				sha256 -qs "test" | openssl rsautl -sign -inkey "${TRACKFILE_REAL_PRIVATEKEY}" -out "${SCRATCHDIR}/testsign" 2>${DEVICES}/null
				SIGNATURE_BYTES="$(stat -f '%z' ${SCRATCHDIR}/testsign)"
				rm ${SCRATCHDIR}/testsign 2>${DEVICES}/null
			else
				SIGNATURE_BYTES="0"
			fi

			if [ "${TRACKFILE_DATE}" = "" ] ; then
				TRACKFILE_DATE="$(date "+%s")"
			fi
			TRACKDATA="$(verify_loop "$@")"
			TRACKDATA="$(printf "I:trackfile:1.2:${TRACKFILE_DATE}:${SIGNATURE_BYTES}:${TRACKFILE_AUTHORITY}:${TRACKFILE_USER}\n${TRACKDATA}\n#")"
			echo "${TRACKDATA}" | dd bs=512 fillchar=" " conv=sync "of=${SCRATCHDIR}/head" 2>${DEVICES}/null
			
			if [ -r "${TRACKFILE_REAL_PRIVATEKEY}" ] ; then
				sha256 -q "${SCRATCHDIR}/head" | openssl rsautl -sign -inkey "${TRACKFILE_REAL_PRIVATEKEY}" -out "${SCRATCHDIR}/sign" 2>${DEVICES}/null
				PADSIZE="$(( ${SIGNATURE_BYTES} % 512 ))"
				if [ "${PADSIZE}" != "0" ] ; then
					PADSIZE="$(( 512 - (${SIGNATURE_BYTES} % 512) ))"
					dd if=/dev/zero bs=${PADSIZE} count=1 of=${SCRATCHDIR}/pad 2>${DEVICES}/null
					cat ${SCRATCHDIR}/pad ${SCRATCHDIR}/sign >${SCRATCHDIR}/realsign
					mv ${SCRATCHDIR}/realsign ${SCRATCHDIR}/sign
				fi
			fi

			cat "${SCRATCHDIR}/head" "${SCRATCHDIR}/sign" >"${SCRATCHDIR}/trackfile"
			cp "${SCRATCHDIR}/trackfile" "${TRACKFILE}"
		else
			dd "if=${RTRACKFILE}" bs=512 "of=${SCRATCHDIR}/trackfile" 2>${DEVICES}/null
			RTRACKFILE="${SCRATCHDIR}/trackfile"

			SIGNATURE_BYTES="$(grep -a ^I: ${RTRACKFILE} | cut -d : -f 5)"
			if [ "${SIGNATURE_BYTES}" != "" ] ; then
				if [ "${SIGNATURE_BYTES}" != "0" ] ; then
					PAD="$(( "${SIGNATURE_BYTES}" % 512 ))"
					SIGSIZE="$(( (512 - ${PAD}) / 512 ))"
					SIZE="$(($( stat -f '%z' ${RTRACKFILE}) / 512))"
					OFFSET="$(( ${SIZE} - ${SIGSIZE}))"
					dd if=${RTRACKFILE} bs=512 count=$((${OFFSET})) "of=${SCRATCHDIR}/head" 2>${DEVICES}/null
					dd if=${RTRACKFILE} bs=512 skip=${OFFSET} count=${SIGSIZE} 2>${DEVICES}/null | dd bs=1 skip="${PAD}" "of=${SCRATCHDIR}/sig" 2>${DEVICES}/null
					RTRACKFILE="${SCRATCHDIR}/head"
					RHASH="$(sha256 -q "${RTRACKFILE}")"
					SHASH="$(openssl rsautl -verify -pubin -inkey "${TRACKFILE_REAL_PUBLICKEY}" -in "${SCRATCHDIR}/sig" 2>${DEVICES}/null)"
					if [ "${RHASH}" = "${SHASH}" ] ; then
						if [ "${QUIET}" = "no" ] ; then
							echo "RSA Verification Passed"
						fi
					else
						if [ "${QUIET}" = "no" ] ; then
							echo "RSA Verification Failed"
							ERRORCODE="65"
						fi
					fi
				fi
			fi
			if [ "${TRACKFILE_ONLYRSA}" = "no" ] ; then
				if [ "$1" = "" ] ; then
					verify_loop $(grep -a "^F:" "${RTRACKFILE}" | cut -d : -f 2)
				else
					verify_loop "$@"
				fi
			fi
		fi
	else
		verify_loop "$@"
	fi
	rm -r "${SCRATCHDIR}"
	exit "${ERRORCODE}"
}

verify "$@"
